name: Docker test, build and push

on:
  push:
  pull_request:


jobs:
  test:
    name: test pep8
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@master
      - name: Setup Python 3.7
        uses: actions/setup-python@master
        with:
          python-version: 3.7
      - name: flake8
        run: |
          pip install flake8
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --show-source --statistics
          # The GitHub editor is 127 chars wide
          flake8 . --count --max-complexity=10 --max-line-length=127 --statistics

  build:
    name: Build Docker image (${{matrix.database}}) (${{ matrix.arch }})
    runs-on: ubuntu-20.04
    env:
      IMAGE_TAG: ghcr.io/${{ github.repository_owner }}/backupbot
      IMAGE_TAG_DH: ${{ secrets.DOCKERHUB_OWNER }}/backupbot
    needs: test
    strategy:
      matrix:
        arch: [linux/386, linux/amd64, linux/arm/v6, linux/arm/v7, linux/arm64, linux/ppc64le]
       # database: [folder, influxdb, redis, mariadb, postgresql, default]
        database: [folder]
        exclude:
          - arch: linux/386
            database: influxdb
          - arch: linux/arm/v6
            database: influxdb

    steps:
      - name: Checkout current repo
        uses: actions/checkout@v2

        with:
          submodules: "recursive"

      - name: Get version

        run: |
          # Get latest commit short hash
          HASH_VERSION=$(git rev-parse --short HEAD)
          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          # Use Docker `latest` tag convention
          [ "$VERSION" == "master" ] && VERSION=latest

          # Convert IMAGE_TAG, HASH_VERSION and VERSION to lowercase (repository name must be lowercase)
          IMAGE_TAG=$(echo "$IMAGE_TAG" | awk '{print tolower($0)}')
          IMAGE_TAG_DH=$(echo "$IMAGE_TAG_DH" | awk '{print tolower($0)}')
          HASH_VERSION=$(echo "$HASH_VERSION" | awk '{print tolower($0)}')
          VERSION=$(echo "$VERSION" | awk '{print tolower($0)}')
          ARCH=${{ matrix.arch }}
          SAFE_ARCH=${ARCH///}  # linux/amd64 -> linuxamd64
          if [ "${{ matrix.database }}" != default ]; then
              declare -a DATABASE="${{ matrix.database }}-"
              declare -a BUILD_ARG="${{ matrix.database }}"
          else
              declare -a DATABASE=""
              declare -a BUILD_ARG="postgresql"
          fi


          # Store variable for future use
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
          echo "IMAGE_TAG_DH=$IMAGE_TAG_DH" >> $GITHUB_ENV
          echo "HASH_VERSION=$HASH_VERSION" >> $GITHUB_ENV
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "SAFE_ARCH=$SAFE_ARCH" >> $GITHUB_ENV
          echo "DATABASE=$DATABASE" >> $GITHUB_ENV
          echo "BUILD_ARG=$BUILD_ARG" >> $GITHUB_ENV


          # Print debug info
          echo "hash version: $HASH_VERSION"
          echo "version: $VERSION"
          echo "safe arch: $SAFE_ARCH"
          # Save env to file
          cat $GITHUB_ENV > github.env

      - name: Upload environment info as artifact
        uses: actions/upload-artifact@v2
        with:
          name: github_env
          path: github.env
          if-no-files-found: warn

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1


      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1


      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-${{ matrix.database}}-buildx-${{ env.SAFE_ARCH }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.database}}-buildx-${{ env.SAFE_ARCH }}-
      - name: Login to ghcr registry
        uses: docker/login-action@v1
        if: ${{ github.event_name != 'pull_request'}}
        with:
          registry: ghcr.io
          username: ${{ secrets.GH_USERNAME }}
          password: ${{ secrets.GH_ACCESS_TOKEN }}

      - name: Login to Docker Hub registry
        uses: docker/login-action@v1
        if: ${{ github.event_name != 'pull_request'}}
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_ACCESS_TOKEN }}

      - name: Build image
        uses: docker/build-push-action@v2

        with:
          context: .
          file: ./Dockerfile
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,mode=max,dest=/tmp/.buildx-cache
          platforms: ${{ matrix.arch }}
          push: false
          load: true
          tags: |
            backupbot:${{ env.DATABASE }}${{ env.HASH_VERSION }}-${{ env.SAFE_ARCH }}
          build-args: database=${{ env.BUILD_ARG}}
      - name: Tag and push image
        if: ${{ github.event_name != 'pull_request'}}
        run: |
          if [ "${{ env.HASH_VERSION }}" != latest ]; then
              declare -a VERSION="-${{ env.VERSION }}"
          else
              declare -a VERSION=""
          fi

          docker tag backupbot:${{ env.DATABASE }}${{ env.HASH_VERSION }}-${{ env.SAFE_ARCH }} ${{ env.IMAGE_TAG }}:${{ env.DATABASE }}${{ env.HASH_VERSION }}-${{ env.SAFE_ARCH }}
          docker tag backupbot:${{ env.DATABASE }}${{ env.HASH_VERSION }}-${{ env.SAFE_ARCH }} ${{ env.IMAGE_TAG }}:${{ matrix.database}}$VERSION-${{ env.SAFE_ARCH }}
          docker tag backupbot:${{ env.DATABASE }}${{ env.HASH_VERSION }}-${{ env.SAFE_ARCH }} ${{ env.IMAGE_TAG_DH }}:${{ env.DATABASE }}${{ env.HASH_VERSION }}-${{ env.SAFE_ARCH }}
          docker tag backupbot:${{ env.DATABASE }}${{ env.HASH_VERSION }}-${{ env.SAFE_ARCH }} ${{ env.IMAGE_TAG_DH }}:${{ matrix.database}}$VERSION-${{ env.SAFE_ARCH }}
          docker push ${{ env.IMAGE_TAG}}:${{ env.DATABASE }}${{ env.HASH_VERSION}}-${{ env.SAFE_ARCH }}
          docker push ${{ env.IMAGE_TAG }}:${{ matrix.database}}$VERSION-${{ env.SAFE_ARCH }}
          docker push ${{ env.IMAGE_TAG_DH }}:${{ env.DATABASE }}${{ env.HASH_VERSION }}-${{ env.SAFE_ARCH }}
          docker push ${{ env.IMAGE_TAG_DH }}:${{ matrix.database}}$VERSION-${{ env.SAFE_ARCH }}
      - name: Save image as tar archive
        if: ${{ github.event_name != 'pull_request'}}
        run: |
          docker save ${{ env.IMAGE_TAG }}:${{ env.DATABASE }}${{ env.HASH_VERSION }}-${{ env.SAFE_ARCH }} -o ${{ env.DATABASE }}${{ env.SAFE_ARCH }}.tar
      - name: Save image as tar archive (pull request)
        if: ${{ github.event_name == 'pull_request'}}
        run: |
          docker save backupbot:${{ env.DATABASE }}${{ env.HASH_VERSION }}-${{ env.SAFE_ARCH }} -o ${{ env.DATABASE }}${{ env.SAFE_ARCH }}.tar
      - name: Upload image as artifact
        uses: actions/upload-artifact@v2

        with:
          name: image_${{ matrix.database}}_${{ env.SAFE_ARCH }}
          path: ${{ env.DATABASE }}${{ env.SAFE_ARCH }}.tar

  push-manifest:
    name: Create and push multi-arch Docker manifest (${{matrix.database}})
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        #database: [ folder, influxdb, redis, mariadb, postgresql ]
        database: [ folder]
    if: ${{ github.event_name != 'pull_request'}}
    env:
      DOCKER_CLI_EXPERIMENTAL: enabled
    needs: build

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v2

      - name: Load environment info and built images
        run: |
          cat github_env/github.env > $GITHUB_ENV
          if [ "${{ matrix.database }}" != influxdb ]; then
            docker load --input image_${{ matrix.database }}_linux386/${{ matrix.database }}-linux386.tar
            docker load --input image_${{ matrix.database }}_linuxarmv6/${{ matrix.database }}-linuxarmv6.tar
          fi
          docker load --input image_${{ matrix.database }}_linuxamd64/${{ matrix.database }}-linuxamd64.tar
          docker load --input image_${{ matrix.database }}_linuxarmv7/${{ matrix.database }}-linuxarmv7.tar
          docker load --input image_${{ matrix.database }}_linuxarm64/${{ matrix.database }}-linuxarm64.tar
          docker load --input image_${{ matrix.database }}_linuxppc64le/${{ matrix.database }}-linuxppc64le.tar
      - name: Login to ghcr registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ secrets.GH_USERNAME }}
          password: ${{ secrets.GH_ACCESS_TOKEN }}

      - name: Login to Docker Hub registry
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_ACCESS_TOKEN }}

      - name: Create and push manifest

        run: |
          if [ "${{ env.VERSION }}" != latest ]; then
              declare -a VERSION="-${{ env.VERSION }}"
          else
              declare -a VERSION=""
          fi
          if [ "${{ matrix.database }}" != influxdb ]; then
            declare -a archs=("linux386" "linuxamd64" "linuxarmv6" "linuxarmv7" "linuxarm64" "linuxppc64le")
          else
            declare -a archs=("linuxamd64" "linuxarmv7" "linuxarm64" "linuxppc64le")
          fi

          # -- Push to ghcr.io
          declare -a  docker_hubs=("${{ env.IMAGE_TAG }}" "${{ env.IMAGE_TAG_DH}}")
          for docker_hub in "${docker_hubs[@]}"; do
            for arch in "${archs[@]}"; do
              docker tag "${{ env.IMAGE_TAG }}:${{ matrix.database }}-${{ env.HASH_VERSION }}-$arch" "$docker_hub:${{ matrix.database }}$VERSION-$arch"
            done
            manifest=""
            for arch in "${archs[@]}"; do
               manifest="$manifest --amend $docker_hub:${{ matrix.database }}-${{ env.HASH_VERSION }}-$arch"
            done
            echo "manifest: $manifest"
            docker manifest create $docker_hub:${{ matrix.database }}-${{ env.HASH_VERSION }} $manifest
            docker manifest push $docker_hub:${{ matrix.database }}-${{ env.HASH_VERSION }}

            # Tag images as VERSION (like 'latest')
            for arch in "${archs[@]}"; do
              docker tag "${{ env.IMAGE_TAG }}:${{ matrix.database }}-${{ env.HASH_VERSION }}-$arch" "$docker_hub:${{ matrix.database }}$VERSION-$arch"
            done
            manifest=""
            docker image ls
            for arch in "${archs[@]}"; do
               manifest="$manifest --amend $docker_hub:${{ matrix.database }}$VERSION-$arch"
            done
            echo -e "docker manifest create $docker_hub:${{ matrix.database }}$VERSION $manifest"
            docker manifest create $docker_hub:${{ matrix.database }}$VERSION $manifest
            echo "docker manifest push $docker_hub:${{ matrix.database }}$VERSION"
            docker manifest push $docker_hub:${{ matrix.database }}$VERSION
          done